def solve(board):
    result = first_blank(board)
    if result is None:
        # The board is solved
        return board

    i, j = result

    row = board[i]

    column = []
    for k in range(9):
        column.append(board[k][j])

    box_rows = get_box_indices(i)
    box_cols = get_box_indices(j)

    box = []
    for r in box_rows:
        for c in box_cols:
            box.append(board[r][c])

    possible_digits = my_possibilities(row, column, box)

    for digit in possible_digits:
        board[i][j] = digit
        solution = solve(board)
        if solution is not None:
            return solution

    board[i][j] = 0
    return None


def get_box_indices(x):
    if x == 0: return [0, 1, 2]
    if x == 1: return [0, 1, 2]
    if x == 2: return [0, 1, 2]

    if x == 3: return [3, 4, 5]
    if x == 4: return [3, 4, 5]
    if x == 5: return [3, 4, 5]

    if x == 6: return [6, 7, 8]
    if x == 7: return [6, 7, 8]
    if x == 8: return [6, 7, 8]


def first_blank(board):
    for i in range(9):
        for j in range(9):
            if board[i][j] == 0:
                return i, j

    return None


def my_possibilities(row, column, box):
    possibilities = {1, 2, 3, 4, 5, 6, 7, 8, 9}

    for digit in row:
        if digit in possibilities:
            possibilities.remove(digit)

    for digit in column:
        if digit in possibilities:
            possibilities.remove(digit)

    for digit in box:
        if digit in possibilities:
            possibilities.remove(digit)

    return possibilities


def is_valid_sudoku(board):
    for i in range(9):
        for j in range(9):
            if board[i][j] != 0:
                num = board[i][j]
                board[i][j] = 0
                if not is_valid_move(board, i, j, num):
                    return False
                board[i][j] = num
    return True


def is_valid_move(board, row, col, num):
    return (
        all(board[row][j] != num for j in range(9)) and
        all(board[i][col] != num for i in range(9)) and
        all(
            board[row // 3 * 3 + i][col // 3 * 3 + j] != num
            for i in range(3) for j in range(3)
        )
    )


def print_sudoku(board):
    for i, row in enumerate(board):
        if i % 3 == 0 and i != 0:
            print("-" * 21)
        for j, value in enumerate(row):
            if j % 3 == 0 and j != 0:
                print("|", end=" ")
            print(value if value != 0 else ".", end=" ")
        print()


start = [
    [1, 0, 0, 4, 8, 9, 0, 0, 6],
    [7, 3, 0, 0, 0, 0, 0, 4, 0],
    [0, 0, 0, 0, 0, 1, 2, 9, 5],
    [0, 0, 7, 1, 2, 0, 6, 0, 0],
    [5, 0, 0, 7, 0, 3, 0, 0, 8],
    [0, 0, 6, 0, 9, 5, 7, 0, 0],
    [9, 1, 4, 6, 0, 0, 0, 0, 0],
    [0, 2, 0, 0, 0, 0, 0, 3, 7],
    [8, 0, 0, 5, 1, 2, 0, 0, 4]
]

if is_valid_sudoku(start):
    solved_board = solve(start)
    if solved_board is not None:
        print_sudoku(solved_board)
else:
    print("The given Sudoku puzzle is not valid and cannot be solved.")
